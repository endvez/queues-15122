/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2021                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/*
 * Extended interface of queues
 *
 * 15-122 Principles of Imperative Computation
 */


/************************/
/*** Client interface ***/
/************************/

typedef void print_data_fn(void* x);            // may be useful for debugging
typedef bool check_property_fn(void* x);
typedef void* iterate_fn(void* accum, void* x);


/**********************/
/*** Implementation ***/
/**********************/

typedef struct list_node list;
struct list_node {
  void* data;
  list* next;
};

typedef struct queue_header queue;
struct queue_header {
  list* front;
  list* back;
  int size;
};
typedef queue* queue_t;
bool is_inclusive_segment(list* start, list* end, int i) {
  /* FIX ME */
  if (i < 0) return false;
  else if (start == NULL) return i == 0;
  else if (start == end) return start->next == NULL && i == 1;
  else return is_inclusive_segment(start->next,end,i-1);
}

bool is_queue(queue_t Q) {
  /* FIX ME */
  return Q != NULL && is_inclusive_segment(Q->front, Q->back, Q->size);
}

queue_t queue_new()
/*@ensures is_queue(\result); @*/ 
{
  queue_t Q = alloc(queue);
  Q->front = NULL;
  Q->back = NULL;
  Q->size = 0;
  return Q;
}

int queue_size(queue_t Q)
/*@requires is_queue(Q); @*/
/*@ensures \result >= 0 && is_queue(Q); @*/ 
{
  return Q->size;
}

void enq(queue_t Q, void* x)
/*@requires is_queue(Q); @*/
/*@ensures is_queue(Q); @*/ 
{
  list* new = alloc(list);
  new->next = NULL;
  new->data = x;
  if (Q->size == 0) Q->front = new;
  else Q->back->next = new;
  Q->back = new;
  Q->size = Q->size + 1;
}
void* deq(queue_t Q)
/*@requires is_queue(Q) && queue_size(Q) > 0; @*/ 
//@ensures is_queue(Q);
{
  void* x = Q->front->data;
  Q->front = Q->front->next;
  Q->size = Q->size - 1;
  return x;

}
void* queue_peek(queue_t Q, int i)
/*@requires is_queue(Q) && 0 <= i && i < queue_size(Q); @*/ 
//@ensures is_queue(Q);
{
  list* temp = Q->front;
  for (int j = 0; j < i; j++) {
    temp = temp->next;
  }
  return temp->data;
}
void queue_reverse(queue_t Q)
/*@requires is_queue(Q); @*/ 
//@ensures is_queue(Q);
{
  if (queue_size(Q) <= 1) return;
  else if (Q->size == 2) {
    list* temp = Q->front;
    Q->front = Q->back;
    Q->back = temp;
    Q->front->next = Q->back;
    Q->back->next = NULL;
    return;
  }
  list* end = Q->front;
	list* current = end->next;
	list* next = current->next;
	while (current != NULL) {
		next = current->next;
		current->next = end;
		end = current;
		current = next;
	}
	list* b = Q->back;
	Q->back = Q->front;
	Q->front = b;
	Q->back->next = NULL;

}

bool queue_all(queue_t Q, check_property_fn* P) 
/*@requires is_queue(Q) && P != NULL; @*/
//@ensures is_queue(Q);
{
  if (queue_size(Q) <= 0) return true;
  list* temp = Q->front;
  while (temp != NULL) {
    if (!(*P)(temp->data)) return false;
    temp = temp->next;
  } 
  return true;
}


void* queue_iterate(queue_t Q, void* base, iterate_fn* F)
/*@requires is_queue(Q) && F != NULL; @*/ 
//@ensures is_queue(Q);
{
  if (queue_size(Q) <= 0) return base;
  list* temp = Q->front;
  void* x = base;
  while (temp != NULL) {
    x = (*F)(x, temp->data);
    temp = temp->next;
  }
  return x;
}

void print_queue(queue* Q, print_data_fn* print_data) {
  /* OPTIONAL (but recommended) */
  return;
}

/* Other functions go there */


// Client type

/*************************/
/*** Library interface ***/
/*************************/

// typedef ______* queue_t;

/* O(1) */
queue_t queue_new()
  /*@ensures \result != NULL; @*/ ;

/* O(1) */
int queue_size(queue_t Q)
  /*@requires Q != NULL; @*/
  /*@ensures \result >= 0; @*/ ;

/* O(1) -- adds an item to the back of the queue */
void enq(queue_t Q, void* x)
  /*@requires Q != NULL; @*/ ;

/* O(1) -- removes an item from the front of the queue */
void* deq(queue_t Q)
  /*@requires Q != NULL && queue_size(Q) > 0; @*/ ;

/* O(i) -- doesn't remove the item from the queue */
void* queue_peek(queue_t Q, int i)
  /*@requires Q != NULL && 0 <= i && i < queue_size(Q); @*/ ;

/* O(n) */
void queue_reverse(queue_t Q)
  /*@requires Q != NULL; @*/ ;

/* O(n) worst case, assuming P is O(1) */
bool queue_all(queue_t Q, check_property_fn* P)
  /*@requires Q != NULL && P != NULL; @*/ ;

/* O(n) worst case, assuming F is O(1) */
void* queue_iterate(queue_t Q, void* base, iterate_fn* F)
  /*@requires Q != NULL && F != NULL; @*/ ;
